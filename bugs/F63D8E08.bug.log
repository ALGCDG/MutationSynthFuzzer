{:input (genetic.representation/genetic-representation "examples/58179.C2FA80B0.blif"), :error {:type :synth-fail, :input-verilog "/* Generated by Yosys 0.15+89 (git sha1 8ca973718, gcc 10.0.0 -Og -fPIC) */\n\nmodule presynth(\\$0_48 , \\$1_52 , \\$2_56 , \\$3_60 , \\$4_64 , \\$5_68 , \\$6_72 , \\$7_76 , \\$8_80 , \\$9_84 , \\$10_88 , \\$11_92 , \\$12_96 , \\$13_100 , \\$65_69_101_85_77_89_61_93_97_57_14_53_81_73_49 , \\$15_47 , \\$16_51 , \\$17_55 , \\$18_59 , \\$19_63 , \\$20_67 \n, \\$21_71 , \\$22_75 , \\$23_79 , \\$24_83 , \\$25_87 , \\$26_91 , \\$27_95 , \\$28_99 );\n  wire _000_;\n  wire _001_;\n  wire _002_;\n  wire _003_;\n  wire _004_;\n  wire _005_;\n  wire _006_;\n  wire _007_;\n  wire _008_;\n  wire _009_;\n  wire _010_;\n  wire _011_;\n  wire _012_;\n  wire _013_;\n  wire _014_;\n  wire _015_;\n  wire _016_;\n  wire _017_;\n  wire _018_;\n  wire _019_;\n  wire _020_;\n  wire _021_;\n  wire _022_;\n  wire _023_;\n  wire _024_;\n  wire _025_;\n  wire _026_;\n  wire _027_;\n  wire _028_;\n  wire _029_;\n  wire _030_;\n  wire _031_;\n  wire _032_;\n  wire _033_;\n  wire _034_;\n  wire _035_;\n  wire _036_;\n  wire _037_;\n  wire _038_;\n  wire _039_;\n  wire _040_;\n  wire _041_;\n  wire _042_;\n  wire _043_;\n  wire _044_;\n  wire _045_;\n  wire _046_;\n  wire _047_;\n  wire _048_;\n  wire _049_;\n  wire _050_;\n  wire _051_;\n  wire _052_;\n  wire _053_;\n  wire _054_;\n  wire _055_;\n  wire _056_;\n  wire _057_;\n  wire _058_;\n  wire _059_;\n  wire _060_;\n  wire _061_;\n  wire _062_;\n  wire _063_;\n  wire _064_;\n  wire _065_;\n  wire _066_;\n  wire _067_;\n  wire _068_;\n  wire _069_;\n  wire _070_;\n  wire _071_;\n  wire _072_;\n  wire _073_;\n  wire _074_;\n  wire _075_;\n  wire _076_;\n  wire _077_;\n  wire _078_;\n  wire _079_;\n  wire _080_;\n  wire _081_;\n  wire _082_;\n  wire _083_;\n  wire _084_;\n  wire _085_;\n  wire _086_;\n  wire _087_;\n  input \\$0_48 ;\n  wire \\$0_48 ;\n  input \\$10_88 ;\n  wire \\$10_88 ;\n  input \\$11_92 ;\n  wire \\$11_92 ;\n  input \\$12_96 ;\n  wire \\$12_96 ;\n  input \\$13_100 ;\n  wire \\$13_100 ;\n  output \\$15_47 ;\n  wire \\$15_47 ;\n  output \\$16_51 ;\n  wire \\$16_51 ;\n  output \\$17_55 ;\n  wire \\$17_55 ;\n  output \\$18_59 ;\n  wire \\$18_59 ;\n  output \\$19_63 ;\n  wire \\$19_63 ;\n  input \\$1_52 ;\n  wire \\$1_52 ;\n  output \\$20_67 ;\n  wire \\$20_67 ;\n  output \\$21_71 ;\n  wire \\$21_71 ;\n  output \\$22_75 ;\n  wire \\$22_75 ;\n  output \\$23_79 ;\n  wire \\$23_79 ;\n  output \\$24_83 ;\n  wire \\$24_83 ;\n  output \\$25_87 ;\n  wire \\$25_87 ;\n  output \\$26_91 ;\n  wire \\$26_91 ;\n  output \\$27_95 ;\n  wire \\$27_95 ;\n  output \\$28_99 ;\n  wire \\$28_99 ;\n  input \\$2_56 ;\n  wire \\$2_56 ;\n  input \\$3_60 ;\n  wire \\$3_60 ;\n  input \\$4_64 ;\n  wire \\$4_64 ;\n  input \\$5_68 ;\n  wire \\$5_68 ;\n  input \\$65_69_101_85_77_89_61_93_97_57_14_53_81_73_49 ;\n  wire \\$65_69_101_85_77_89_61_93_97_57_14_53_81_73_49 ;\n  input \\$6_72 ;\n  wire \\$6_72 ;\n  input \\$7_76 ;\n  wire \\$7_76 ;\n  input \\$8_80 ;\n  wire \\$8_80 ;\n  input \\$9_84 ;\n  wire \\$9_84 ;\n  wire \\:missing_edge ;\n  assign _024_ = 4'h8 >> { _026_, _025_ };\n  assign _052_ = 4'h8 >> { _054_, _053_ };\n  assign _055_ = 4'h8 >> { _057_, _056_ };\n  assign _058_ = 4'h8 >> { _060_, _059_ };\n  assign _061_ = 4'h8 >> { _063_, _062_ };\n  assign _064_ = 4'h8 >> { _066_, _065_ };\n  assign _027_ = 4'h8 >> { _029_, _028_ };\n  assign _030_ = 4'h8 >> { _032_, _031_ };\n  assign _033_ = 4'h8 >> { _035_, _034_ };\n  assign _036_ = 4'h8 >> { _038_, _037_ };\n  assign _041_ = 4'h8 >> { _040_, _039_ };\n  assign _042_ = 4'h8 >> { _044_, _043_ };\n  assign _045_ = 4'h8 >> { _047_, _046_ };\n  assign _049_ = 4'h8 >> { _051_, _050_ };\n  assign _020_ = 1'h0;\n  assign _022_ = 1'h1;\n  assign _023_ = 1'h0;\n  assign \\:missing_edge  = 1'h0;\n  assign _040_ = _074_;\n  assign _039_ = _004_;\n  assign _019_ = _086_;\n  assign _086_ = _041_;\n  assign _038_ = _074_;\n  assign _037_ = _003_;\n  assign _018_ = _085_;\n  assign _085_ = _036_;\n  assign _035_ = _074_;\n  assign _034_ = _002_;\n  assign _017_ = _084_;\n  assign _084_ = _033_;\n  assign _032_ = _074_;\n  assign _031_ = _001_;\n  assign _016_ = _082_;\n  assign _082_ = _030_;\n  assign _066_ = _074_;\n  assign _065_ = _087_;\n  assign _015_ = _081_;\n  assign _081_ = _064_;\n  assign _063_ = _074_;\n  assign _062_ = _083_;\n  assign _014_ = _079_;\n  assign _079_ = _061_;\n  assign _060_ = _074_;\n  assign _059_ = _080_;\n  assign _013_ = _078_;\n  assign _078_ = _058_;\n  assign _057_ = _074_;\n  assign _056_ = _076_;\n  assign _012_ = _077_;\n  assign _077_ = _055_;\n  assign _054_ = _074_;\n  assign _053_ = _072_;\n  assign _011_ = _075_;\n  assign _075_ = _052_;\n  assign _051_ = _074_;\n  assign _050_ = _068_;\n  assign _009_ = _073_;\n  assign _073_ = _049_;\n  assign _047_ = _074_;\n  assign _046_ = _048_;\n  assign _008_ = _071_;\n  assign _071_ = _045_;\n  assign _044_ = _074_;\n  assign _043_ = _021_;\n  assign _007_ = _070_;\n  assign _070_ = _042_;\n  assign _029_ = _074_;\n  assign _028_ = _010_;\n  assign _006_ = _069_;\n  assign _069_ = _027_;\n  assign _026_ = _074_;\n  assign _025_ = _000_;\n  assign _005_ = _067_;\n  assign _067_ = _024_;\nendmodule\n", :result {:exit 1, :out "\n /----------------------------------------------------------------------------\\\n |                                                                            |\n |  yosys -- Yosys Open SYnthesis Suite                                       |\n |                                                                            |\n |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |\n |                                                                            |\n |  Permission to use, copy, modify, and/or distribute this software for any  |\n |  purpose with or without fee is hereby granted, provided that the above    |\n |  copyright notice and this permission notice appear in all copies.         |\n |                                                                            |\n |  THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |\n |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |\n |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |\n |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |\n |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |\n |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |\n |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |\n |                                                                            |\n \\----------------------------------------------------------------------------/\n\n Yosys 0.15+89 (git sha1 8ca973718, gcc 10.0.0 -Og -fPIC)\n\n\n-- Running command `read_verilog /tmp/fuzzmount745B5940/8931FC8F.v; synth; opt; opt_clean; opt_demorgan; opt_expr; opt_lut; opt_merge; opt_muxtree; opt_reduce; fsm_opt; onehot; rename presynth postsynth write_verilog /tmp/fuzzmount745B5940/8931FC8F.post.v' --\n\n1. Executing Verilog-2005 frontend: /tmp/fuzzmount745B5940/8931FC8F.v\nParsing Verilog input from `/tmp/fuzzmount745B5940/8931FC8F.v' to AST representation.\nGenerating RTLIL representation for module `\\presynth'.\nSuccessfully finished Verilog frontend.\n\n2. Executing SYNTH pass.\n\n2.1. Executing HIERARCHY pass (managing design hierarchy).\n\n2.2. Executing PROC pass (convert processes to netlists).\n\n2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).\nRemoved a total of 0 dead cases.\n\n2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).\nRemoved 0 redundant assignments.\nPromoted 0 assignments to connections.\n\n2.2.4. Executing PROC_INIT pass (extract init attributes).\n\n2.2.5. Executing PROC_ARST pass (detect async resets in processes).\n\n2.2.6. Executing PROC_MUX pass (convert decision trees to multiplexers).\n\n2.2.7. Executing PROC_DLATCH pass (convert process syncs to latches).\n\n2.2.8. Executing PROC_DFF pass (convert process syncs to FFs).\n\n2.2.9. Executing PROC_MEMWR pass (convert process memory writes to cells).\n\n2.2.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.11. Executing OPT_EXPR pass (perform const folding).\nOptimizing module presynth.\n\n2.3. Executing OPT_EXPR pass (perform const folding).\nOptimizing module presynth.\n\n2.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\presynth..\nRemoved 14 unused cells and 102 unused wires.\n<suppressed ~15 debug messages>\n\n2.5. Executing CHECK pass (checking for obvious problems).\nChecking module presynth...\nWarning: Wire presynth.\\$28_99 is used but has no driver.\nWarning: Wire presynth.\\$27_95 is used but has no driver.\nWarning: Wire presynth.\\$26_91 is used but has no driver.\nWarning: Wire presynth.\\$25_87 is used but has no driver.\nWarning: Wire presynth.\\$24_83 is used but has no driver.\nWarning: Wire presynth.\\$23_79 is used but has no driver.\nWarning: Wire presynth.\\$22_75 is used but has no driver.\nWarning: Wire presynth.\\$21_71 is used but has no driver.\nWarning: Wire presynth.\\$20_67 is used but has no driver.\nWarning: Wire presynth.\\$19_63 is used but has no driver.\nWarning: Wire presynth.\\$18_59 is used but has no driver.\nWarning: Wire presynth.\\$17_55 is used but has no driver.\nWarning: Wire presynth.\\$16_51 is used but has no driver.\nWarning: Wire presynth.\\$15_47 is used but has no driver.\nFound and reported 14 problems.\n\n2.6. Executing OPT pass (performing simple optimizations).\n\n2.6.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module presynth.\n\n2.6.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\presynth'.\nRemoved a total of 0 cells.\n\n2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\presynth..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\presynth.\nPerformed a total of 0 changes.\n\n2.6.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\presynth'.\nRemoved a total of 0 cells.\n\n2.6.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\presynth..\n\n2.6.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module presynth.\n\n2.6.9. Finished OPT passes. (There is nothing left to do.)\n\n2.7. Executing FSM pass (extract and optimize FSM).\n\n2.7.1. Executing FSM_DETECT pass (finding FSMs in design).\n\n2.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).\n\n2.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\presynth..\n\n2.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).\n\n2.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).\n\n2.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).\n\n2.8. Executing OPT pass (performing simple optimizations).\n\n2.8.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module presynth.\n\n2.8.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\presynth'.\nRemoved a total of 0 cells.\n\n2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\presynth..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\presynth.\nPerformed a total of 0 changes.\n\n2.8.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\presynth'.\nRemoved a total of 0 cells.\n\n2.8.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\presynth..\n\n2.8.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module presynth.\n\n2.8.9. Finished OPT passes. (There is nothing left to do.)\n\n2.9. Executing WREDUCE pass (reducing word size of cells).\n\n2.10. Executing PEEPOPT pass (run peephole optimizers).\n\n2.11. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\presynth..\n\n2.12. Executing ALUMACC pass (create $alu and $macc cells).\nExtracting $alu and $macc cells in module presynth:\n  created 0 $alu and 0 $macc cells.\n\n2.13. Executing SHARE pass (SAT-based resource sharing).\n\n2.14. Executing OPT pass (performing simple optimizations).\n\n2.14.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module presynth.\n\n2.14.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\presynth'.\nRemoved a total of 0 cells.\n\n2.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\presynth..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\presynth.\nPerformed a total of 0 changes.\n\n2.14.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\presynth'.\nRemoved a total of 0 cells.\n\n2.14.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\presynth..\n\n2.14.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module presynth.\n\n2.14.9. Finished OPT passes. (There is nothing left to do.)\n\n2.15. Executing MEMORY pass.\n\n2.15.1. Executing OPT_MEM pass (optimize memories).\nPerformed a total of 0 transformations.\n\n2.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).\nPerformed a total of 0 transformations.\n\n2.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).\n\n2.15.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).\n\n2.15.5. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\presynth..\n\n2.15.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).\n\n2.15.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).\nPerformed a total of 0 transformations.\n\n2.15.8. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\presynth..\n\n2.15.9. Executing MEMORY_COLLECT pass (generating $mem cells).\n\n2.16. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\presynth..\n\n2.17. Executing OPT pass (performing simple optimizations).\n\n2.17.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module presynth.\n<suppressed ~14 debug messages>\n\n2.17.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\presynth'.\nRemoved a total of 0 cells.\n\n2.17.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\presynth..\n\n2.17.5. Finished fast OPT passes.\n\n2.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).\n\n2.19. Executing OPT pass (performing simple optimizations).\n\n2.19.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module presynth.\n\n2.19.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\presynth'.\nRemoved a total of 0 cells.\n\n2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\presynth..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\presynth.\nPerformed a total of 0 changes.\n\n2.19.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\presynth'.\nRemoved a total of 0 cells.\n\n2.19.6. Executing OPT_SHARE pass.\n\n2.19.7. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\presynth..\n\n2.19.9. Executing OPT_EXPR pass (perform const folding).\nOptimizing module presynth.\n\n2.19.10. Finished OPT passes. (There is nothing left to do.)\n\n2.20. Executing TECHMAP pass (map to technology primitives).\n\n2.20.1. Executing Verilog-2005 frontend: /Users/archie/mutator/../yosys/share/techmap.v\nParsing Verilog input from `/Users/archie/mutator/../yosys/share/techmap.v' to AST representation.\nGenerating RTLIL representation for module `\\_90_simplemap_bool_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_reduce_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_logic_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_compare_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_various'.\nGenerating RTLIL representation for module `\\_90_simplemap_registers'.\nGenerating RTLIL representation for module `\\_90_shift_ops_shr_shl_sshl_sshr'.\nGenerating RTLIL representation for module `\\_90_shift_shiftx'.\nGenerating RTLIL representation for module `\\_90_fa'.\nGenerating RTLIL representation for module `\\_90_lcu'.\nGenerating RTLIL representation for module `\\_90_alu'.\nGenerating RTLIL representation for module `\\_90_macc'.\nGenerating RTLIL representation for module `\\_90_alumacc'.\nGenerating RTLIL representation for module `\\$__div_mod_u'.\nGenerating RTLIL representation for module `\\$__div_mod_trunc'.\nGenerating RTLIL representation for module `\\_90_div'.\nGenerating RTLIL representation for module `\\_90_mod'.\nGenerating RTLIL representation for module `\\$__div_mod_floor'.\nGenerating RTLIL representation for module `\\_90_divfloor'.\nGenerating RTLIL representation for module `\\_90_modfloor'.\nGenerating RTLIL representation for module `\\_90_pow'.\nGenerating RTLIL representation for module `\\_90_pmux'.\nGenerating RTLIL representation for module `\\_90_demux'.\nGenerating RTLIL representation for module `\\_90_lut'.\nSuccessfully finished Verilog frontend.\n\n2.20.2. Continuing TECHMAP pass.\nNo more expansions possible.\n<suppressed ~71 debug messages>\n\n2.21. Executing OPT pass (performing simple optimizations).\n\n2.21.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module presynth.\n\n2.21.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\presynth'.\nRemoved a total of 0 cells.\n\n2.21.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\presynth..\n\n2.21.5. Finished fast OPT passes.\n\n2.22. Executing ABC pass (technology mapping using ABC).\n\n2.22.1. Extracting gate netlist of module `\\presynth' to `<abc-temp-dir>/input.blif'..\nExtracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.\nDon't call ABC as there is nothing to map.\nRemoving temp directory.\n\n2.23. Executing OPT pass (performing simple optimizations).\n\n2.23.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module presynth.\n\n2.23.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\presynth'.\nRemoved a total of 0 cells.\n\n2.23.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\presynth..\n\n2.23.5. Finished fast OPT passes.\n\n2.24. Executing HIERARCHY pass (managing design hierarchy).\n\n2.25. Printing statistics.\n\n=== presynth ===\n\n   Number of wires:                 30\n   Number of wire bits:             30\n   Number of public wires:          30\n   Number of public wire bits:      30\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  0\n\n2.26. Executing CHECK pass (checking for obvious problems).\nChecking module presynth...\nFound and reported 0 problems.\n\n3. Executing OPT pass (performing simple optimizations).\n\n3.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module presynth.\n\n3.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\presynth'.\nRemoved a total of 0 cells.\n\n3.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\presynth..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n3.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\presynth.\nPerformed a total of 0 changes.\n\n3.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\presynth'.\nRemoved a total of 0 cells.\n\n3.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n3.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\presynth..\n\n3.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module presynth.\n\n3.9. Finished OPT passes. (There is nothing left to do.)\n\n4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\presynth..\n\n5. Executing OPT_DEMORGAN pass (push inverters through $reduce_* cells).\nWarning: Selection \"opt_demorgan\" did not match any module.\n\n6. Executing OPT_EXPR pass (perform const folding).\nOptimizing module presynth.\n\n7. Executing OPT_LUT pass (optimize LUTs).\nDiscovering LUTs.\nNumber of LUTs:        0\n\nEliminating LUTs.\nNumber of LUTs:        0\n\nCombining LUTs.\nNumber of LUTs:        0\n\nEliminated 0 LUTs.\nCombined 0 LUTs.\n\n8. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\presynth'.\nRemoved a total of 0 cells.\n\n9. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\presynth..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n10. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\presynth.\nPerformed a total of 0 changes.\n\n11. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n12. Executing ONEHOT pass.\n", :err "ERROR: Invalid number of arguments!\n"}}}